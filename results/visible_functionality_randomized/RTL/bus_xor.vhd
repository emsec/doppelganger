library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;

----------------------------------------------
-- VHDL code generated by MHDL v0.1.3.4
----------------------------------------------

entity BusXOR is
    generic (
        SIZE     : natural;
        BUS_SIZE : natural
    );
    port (
        clk           : in    std_logic;
        rst           : in    std_logic;
        read_from_bus : in    std_logic;
        write_to_bus  : in    std_logic;
        bus_line      : inout std_logic_vector (BUS_SIZE - 1 downto 0)
    );
end BusXOR;

architecture arch of BusXOR is
    signal reg_value      : std_logic_vector (SIZE - 1 downto 0);
    signal reg_value_en   : std_logic;
    signal reg_value_next : std_logic_vector (SIZE - 1 downto 0);
begin
    reg_value_next <= reg_value(SIZE - BUS_SIZE - 1 downto 0) &(reg_value(SIZE - 1 downto SIZE - BUS_SIZE) xor bus_line) when (read_from_bus = '1') else reg_value(SIZE - BUS_SIZE - 1 downto 0) & reg_value(SIZE - 1 downto SIZE - BUS_SIZE);
    bus_line <= reg_value(SIZE - 1 downto SIZE - BUS_SIZE) when (write_to_bus = '1') else (OTHERS => 'Z');
    reg_value_en <= read_from_bus or write_to_bus;
    process(CLK)
    begin
        if rising_edge(CLK) then
            if (rst = '1') then
                reg_value <= (OTHERS => '0');
            elsif (reg_value_en = '1') then
                reg_value <= reg_value_next;
            end if;
        end if;
    end process;
    
end arch;

