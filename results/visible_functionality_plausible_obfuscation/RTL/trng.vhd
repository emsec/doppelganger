library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;

----------------------------------------------
-- VHDL code generated by MHDL v0.1.3.4
----------------------------------------------

entity TRNG is
    generic (
        BUS_SIZE : natural
    );
    port (
        clk          : in    std_logic;
        start        : in    std_logic;
        rst          : in    std_logic;
        write_to_bus : in    std_logic;
        bus_line     : inout std_logic_vector (BUS_SIZE - 1 downto 0);
        available    : out   std_logic
    );
end TRNG;

architecture arch of TRNG is
    component BusRegister
        generic (
            SIZE     : natural;
            BUS_SIZE : natural
        );
        port (
            clk           : in    std_logic;
            rst           : in    std_logic;
            input         : in    std_logic_vector (SIZE - 1 downto 0);
            load          : in    std_logic;
            output        : out   std_logic_vector (SIZE - 1 downto 0);
            read_from_bus : in    std_logic;
            write_to_bus  : in    std_logic;
            bus_line      : inout std_logic_vector (BUS_SIZE - 1 downto 0)
        );
    end component;
    signal CNT                   : natural;
    signal feedback              : std_logic;
    signal inst_rng_state_input  : std_logic_vector (127 downto 0);
    signal inst_rng_state_load   : std_logic;
    signal inst_rng_state_output : std_logic_vector (127 downto 0);
    signal lfsr                  : std_logic_vector (18 downto 0);
begin
    inst_rng_state : BusRegister
    generic map (
        SIZE     => 128,
        BUS_SIZE => BUS_SIZE
    )
    port map (
        clk           => clk,
        rst           => '0',
        input         => inst_rng_state_input,
        load          => inst_rng_state_load,
        output        => inst_rng_state_output,
        read_from_bus => '0',
        write_to_bus  => write_to_bus,
        bus_line      => bus_line
    );
    
    feedback <= lfsr(13) xor lfsr(16) xor lfsr(17) xor lfsr(18);
    inst_rng_state_input <= inst_rng_state_output(126 downto 0) & lfsr(18);
    process(CLK)
    begin
        if rising_edge(CLK) then
            if (rst = '0') then
                lfsr <= lfsr(17 downto 0) & feedback;
            else
                lfsr <= (1 => '1', others => '0');
            end if;
            AVAILABLE <= '0';
            inst_rng_state_load <= '0';
            if (START = '1') then
                CNT <= 0;
            elsif (CNT < 128) then
                inst_rng_state_load <= '1';
                CNT <= CNT + 1;
            else
                CNT <= CNT;
                AVAILABLE <= '1';
            end if;
        end if;
    end process;
    
end arch;

