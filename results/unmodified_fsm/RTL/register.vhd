library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;

----------------------------------------------
-- VHDL code generated by MHDL v0.1.3.4
----------------------------------------------

entity BusRegister is
    generic (
        SIZE     : natural;
        BUS_SIZE : natural
    );
    port (
        clk           : in    std_logic;
        rst           : in    std_logic;
        input         : in    std_logic_vector (SIZE - 1 downto 0);
        load          : in    std_logic;
        output        : out   std_logic_vector (SIZE - 1 downto 0);
        read_from_bus : in    std_logic;
        write_to_bus  : in    std_logic;
        bus_line      : inout std_logic_vector (BUS_SIZE - 1 downto 0)
    );
end BusRegister;

architecture arch of BusRegister is
    type reg_mux is (MUX_INPUT, MUX_SHIFT_AND_BUS, MUX_ROTATE);
    
    signal reg_value      : std_logic_vector (SIZE - 1 downto 0);
    signal reg_value_en   : std_logic;
    signal reg_value_mux  : reg_mux;
    signal reg_value_next : std_logic_vector (SIZE - 1 downto 0);
begin
    reg_value_next <= input when (reg_value_mux = MUX_INPUT) else reg_value(SIZE - BUS_SIZE - 1 downto 0) & bus_line when (reg_value_mux = MUX_SHIFT_AND_BUS) else reg_value(SIZE - BUS_SIZE - 1 downto 0) & reg_value(SIZE - 1 downto SIZE - BUS_SIZE);
    bus_line <= reg_value(SIZE - 1 downto SIZE - BUS_SIZE) when (write_to_bus = '1') else (OTHERS => 'Z');
    output <= reg_value;
    process(load, read_from_bus, write_to_bus)
    begin
        reg_value_en <= '0';
        reg_value_mux <= MUX_INPUT;
        if (load = '1') then
            reg_value_en <= '1';
        elsif (read_from_bus = '1') then
            reg_value_mux <= MUX_SHIFT_AND_BUS;
            reg_value_en <= '1';
        elsif (write_to_bus = '1') then
            reg_value_mux <= MUX_ROTATE;
            reg_value_en <= '1';
        end if;
    end process;
    
    process(CLK)
    begin
        if rising_edge(CLK) then
            if (rst = '1') then
                reg_value <= (OTHERS => '0');
            elsif (reg_value_en = '1') then
                reg_value <= reg_value_next;
            end if;
        end if;
    end process;
    
end arch;

