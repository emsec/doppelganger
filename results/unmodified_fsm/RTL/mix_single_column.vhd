library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;

----------------------------------------------
-- VHDL code generated by MHDL v0.1.3.4
----------------------------------------------

entity MixSingleColumn is
    port (
        input  : in  std_logic_vector (31 downto 0);
        output : out std_logic_vector (31 downto 0)
    );
end MixSingleColumn;

architecture arch of MixSingleColumn is
    signal three_x0 : std_logic_vector (7 downto 0);
    signal three_x1 : std_logic_vector (7 downto 0);
    signal three_x2 : std_logic_vector (7 downto 0);
    signal three_x3 : std_logic_vector (7 downto 0);
    signal two_x0   : std_logic_vector (7 downto 0);
    signal two_x1   : std_logic_vector (7 downto 0);
    signal two_x2   : std_logic_vector (7 downto 0);
    signal two_x3   : std_logic_vector (7 downto 0);
    signal x0       : std_logic_vector (7 downto 0);
    signal x1       : std_logic_vector (7 downto 0);
    signal x2       : std_logic_vector (7 downto 0);
    signal x3       : std_logic_vector (7 downto 0);
begin
    x0 <= input(31 downto 24);
    x1 <= input(23 downto 16);
    x2 <= input(15 downto 8);
    x3 <= input(7 downto 0);
    two_x0 <= (x0(6 downto 0) & '0') xor x"1b" when (x0(7) = '1') else x0(6 downto 0) & '0';
    two_x1 <= (x1(6 downto 0) & '0') xor x"1b" when (x1(7) = '1') else x1(6 downto 0) & '0';
    two_x2 <= (x2(6 downto 0) & '0') xor x"1b" when (x2(7) = '1') else x2(6 downto 0) & '0';
    two_x3 <= (x3(6 downto 0) & '0') xor x"1b" when (x3(7) = '1') else x3(6 downto 0) & '0';
    three_x0 <= x0 xor two_x0;
    three_x1 <= x1 xor two_x1;
    three_x2 <= x2 xor two_x2;
    three_x3 <= x3 xor two_x3;
    output(31 downto 24) <= two_x0 xor three_x1 xor x2 xor x3;
    output(23 downto 16) <= x0 xor two_x1 xor three_x2 xor x3;
    output(15 downto 8) <= x0 xor x1 xor two_x2 xor three_x3;
    output(7 downto 0) <= three_x0 xor x1 xor x2 xor two_x3;
end arch;

