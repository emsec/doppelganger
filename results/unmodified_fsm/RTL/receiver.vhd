library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;

----------------------------------------------
-- VHDL code generated by MHDL v0.1.3.4
----------------------------------------------

entity Receiver is
    generic (
        BUS_SIZE : natural
    );
    port (
        clk                : in  std_logic;
        rst                : in  std_logic;
        UART_RX            : in  std_logic;
        write_to_bus       : in  std_logic;
        bus_line           : out std_logic_vector (BUS_SIZE - 1 downto 0);
        available          : out std_logic;
        byte_available     : out std_logic;
        last_received_byte : out std_logic_vector (7 downto 0)
    );
end Receiver;

architecture arch of Receiver is
    component Extended_UART_Receiver
        generic (
            CLK_FREQUENCY : natural;
            BAUD_RATE     : natural;
            BUS_SIZE      : natural
        );
        port (
            CLK                : in  std_logic;
            RST                : in  std_logic;
            RS232_BIT          : in  std_logic;
            write_to_bus       : in  std_logic;
            bus_line           : out std_logic_vector (BUS_SIZE - 1 downto 0);
            available          : out std_logic;
            byte_available     : out std_logic;
            last_received_byte : out std_logic_vector (7 downto 0)
        );
    end component;
    constant MHZ : natural := 100;
    
    signal inst_receiver_available          : std_logic;
    signal inst_receiver_bus_line           : std_logic_vector (BUS_SIZE - 1 downto 0);
    signal inst_receiver_byte_available     : std_logic;
    signal inst_receiver_last_received_byte : std_logic_vector (7 downto 0);
begin
    inst_receiver : Extended_UART_Receiver
    generic map (
        CLK_FREQUENCY => MHZ * 1000000,
        BAUD_RATE     => 115200,
        BUS_SIZE      => BUS_SIZE
    )
    port map (
        CLK                => clk,
        RST                => rst,
        RS232_BIT          => UART_RX,
        write_to_bus       => write_to_bus,
        bus_line           => inst_receiver_bus_line,
        available          => inst_receiver_available,
        byte_available     => inst_receiver_byte_available,
        last_received_byte => inst_receiver_last_received_byte
    );
    
    bus_line <= inst_receiver_bus_line;
    available <= inst_receiver_available;
    last_received_byte <= inst_receiver_last_received_byte;
    byte_available <= inst_receiver_byte_available;
end arch;

